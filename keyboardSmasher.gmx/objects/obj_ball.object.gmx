<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start_position_x = x;
horizontal_speed = 4;
last_known_y = y;
next_y = y;
speed_factor = 1;

//
blink = 0;
//

jump_start_x = x;
jump_start_y = y;
fall_start_x = x;
fall_start_y = y;
slide_start_x = x;
dash_start_x = -1000;


short_jump_height = 160;
short_jump_length = 32 * horizontal_speed;
long_jump_height = 320;
long_jump_length = 64 * horizontal_speed;
fall_height = 320;
fall_length = 64 * horizontal_speed;
actual_jump_length = 0;
actual_jump_height = 0;
dash_length = 256;

on_ground = false;
dash_available = false;
dash_started = false;

short_jump_key = false;
long_jump_key = false;
dash_key = false;
slide_key = false;


movement_type = FALL;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/************************************************************
    BULLET COLLISION
************************************************************/

var vertical_direction = sign(next_y-y);
var collision_occured = false;


//jezeli obiekt spada, lub porusza sie w gore
if (vertical_direction != CONSTANT_ALTITUDE){


    //petla bullet collision
    do{
        if (place_meeting(x,y,obj_collidable)){
            collision_occured = true;
            event_perform(ev_other, EVENT_OUT_FROM_OBJECT);        //wychodzenie z kolidujacych obiektow
            break;
        }
        else{
            y += 31 * vertical_direction;
        }
    }
    until(  !((y &lt; next_y) &amp;&amp; (vertical_direction == DOWNWARDS)) 
        &amp;&amp;  !((y &gt; next_y) &amp;&amp; (vertical_direction == UPWARDS)))
    
        
    //jezeli kolizja nie zaszla, ustaw obiekt tam, gdzie powinien finalnie sie znalezc
    if (!collision_occured){
        y = next_y;
    }

}

//po calej petli wychodzimy z kolizji jeszcze raz
event_perform(ev_other, EVENT_OUT_FROM_OBJECT);


/************************************************************
    Kontakt z gruntem
************************************************************/

if (position_meeting(x, y+17, obj_collidable)){
    on_ground = true;
}
else{
    on_ground = false;
}

if (on_ground &amp;&amp; (movement_type == JUMP || movement_type == FALL) &amp;&amp; vertical_direction == DOWNWARDS)
{
    movement_type = RUN;
    dash_available = true;
}

if (!on_ground &amp;&amp; movement_type == RUN)
{
    fall_start_x = x;
    fall_start_y = y;
    movement_type = FALL;
}


/************************************************************
    Kontakt z sufitem
************************************************************/

if (position_meeting(x, y-17, obj_collidable)){
    if (movement_type != FALL)
    {
        fall_start_x = x;
        fall_start_y = y;
        movement_type = FALL;
    }
}


/************************************************************
************************************************************/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//last_known_x = 0;
if (keyboard_check_pressed(ord('Z')))
    short_jump_key = KEY_DURATION;

if (keyboard_check_pressed(ord('X')))
    long_jump_key = KEY_DURATION;

if (keyboard_check_pressed(ord('C')))
    dash_key = KEY_DURATION;
    
if (keyboard_check_pressed(ord('V')))
    slide_key = KEY_DURATION;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*************************************************************************************************
    Oczyt pozycji glowicy na tasmie nie jest dokladny. Sprawdzajac pozycje co obieg petli
    otrzymujemy wynik podobny do tego: 0,0,0,3,3,7,7,7,12,12,12,12,12,20,20,20,20...
    Jako, ze pozycja bohatera uwarunkowana jest od tego odczytu, posilkujemy sie odczytem
    zegara. Jezeli dwa ostatnie odczyty glowicy sa identyczne, przesuwamy bohatera
    o odleglosc wynikajaca z dlugosci klatki.
*************************************************************************************************/

if (global.current_music_controller.head_position != global.current_music_controller.last_known_head_position){
    
    //pozycja pilki = pozycja startowa * wielkosc kafla * BPS * szybkosc obiektu * (pozycja glowicy + przesuniecie tasmy);
    var computed_x = start_position_x + 32 * (global.current_music_controller.tempo / 60) * horizontal_speed * (global.current_music_controller.head_position + global.current_music_controller.shift);
    speed_factor = 1 - (x - computed_x)/20;
    speed_factor = clamp(0.5, speed_factor, 5.5);
}
else{
    x += 32 * global.current_music_controller.tempo/60 * horizontal_speed * (global.current_time_controller.frame_time/1000) * speed_factor;
}


/*************************************************************************************************
    obsluga skokow
*************************************************************************************************/

if (short_jump_key &gt; 0 &amp;&amp; on_ground &amp;&amp; movement_type != JUMP){
    movement_type = JUMP;
    on_ground = false;
    actual_jump_height = short_jump_height;
    actual_jump_length = short_jump_length - ((x mod 32) &lt; 16) * (x mod 32) + ((x mod 32) &gt; 16) * (32-(x mod 32));
    jump_start_x = x;
    jump_start_y = y;
}


if (long_jump_key &gt; 0 &amp;&amp; on_ground &amp;&amp; movement_type != JUMP){
    movement_type = JUMP;
    on_ground = false;
    actual_jump_height = long_jump_height;
    actual_jump_length = long_jump_length - ((x mod 32) &lt; 16) * (x mod 32) + ((x mod 32) &gt; 16) * (32-(x mod 32));
    jump_start_x = x;
    jump_start_y = y;
}


/*************************************************************************************************
    obsluga szybowania
*************************************************************************************************/

if (dash_key&gt;0 &amp;&amp; dash_available &amp;&amp; !on_ground){
    dash_available = false;
    dash_started = true;
}


/*************************************************************************************************
    obsluga slizgu
*************************************************************************************************/

if (slide_key &amp;&amp; on_ground){
    slide_start_x = x;
}


switch (movement_type)
{
    case JUMP:
        event_perform(ev_other, EVENT_JUMP);
        break;
        
    case DASH:
        event_perform(ev_other, EVENT_DASH);
        break;
        
    case FALL:
        event_perform(ev_other, EVENT_FALL);
        break;
}


if (dash_started)
{
    //obliczamy wysokosc rozpoczecia szybowania. Jezeli obiekt przekroczy ten pulap, zostanie do niego zrownany
    var y_increases = (next_y &gt; y);
    var dash_alititude = ((y div 32) + y_increases) * 32;
    if ((y_increases &amp;&amp; next_y &gt; dash_alititude) || (!y_increases &amp;&amp; next_y &lt; dash_alititude)){
        y = dash_alititude;
        next_y = y;
        movement_type = DASH;
        dash_start_x = x;
        dash_started = false;
    }
}




short_jump_key -= (global.current_time_controller.frame_time/1000);
long_jump_key -= (global.current_time_controller.frame_time/1000);
dash_key -= (global.current_time_controller.frame_time/1000);
slide_key -= (global.current_time_controller.frame_time/1000);

show_debug_message(short_jump_key);

blink = (128 - (x mod 128))/256;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>slide</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fall</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>next_y = fall_start_y + 4*(fall_height/(fall_length*fall_length))*(x-fall_start_x)*(x-fall_start_x);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dash</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &lt; dash_start_x + dash_length ){
    next_y = y;
}
else{
    fall_start_x = x;
    fall_start_y = y;
    movement_type = FALL;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>next_y = jump_start_y + (4*(actual_jump_height/(actual_jump_length*actual_jump_length))*(x-jump_start_x)*(x-jump_start_x) - 4*(x-jump_start_x)*(actual_jump_height/actual_jump_length) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>go out from colliding objects</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while (position_meeting(x, y+16, obj_collidable))
{
    y = floor(y)-1;
}

while (position_meeting(x, y-16, obj_collidable))
{
    y = ceil(y)+1;
}

while (position_meeting(x+16, y, obj_collidable))
{
    x = ceil(x)-1;
    audio_stop_all();
    room_restart();
}

while (position_meeting(x-16, y, obj_collidable))
{
    x = floor(x)+1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview[0] = x-200;
draw_self();

draw_set_alpha(0);
if (x&gt;=2600){
draw_set_alpha(blink/2);
}
draw_rectangle_colour(0,0,100000,1000,c_white,c_white,c_white,c_white, 0);
draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
