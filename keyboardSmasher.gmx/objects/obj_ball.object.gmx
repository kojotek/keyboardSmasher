<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>h_speed = 4;
last_known_y = y;
mid_air_start_x = x;
mid_air_start_y = y;
jump_height = 200;
jump_length = 32*h_speed;
jump_type = 0;

start_position_x = x;

mid_jump = 0;
mid_fall = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( y - last_known_y &gt; 0 &amp;&amp; mid_jump){
    mid_jump = 0;
}


//bullet collision

var y_direction = sign(y-last_known_y);
if (y_direction == 0) y_direction = 1;

for (i = last_known_y; (i&lt;=y)*(1+y_direction)+(i&gt;=y)*(1-y_direction); i += 31*y_direction)
{
    var collision_occured = false;
    while (position_meeting(x, y+16, obj_ghostfloor))
    {
        y = ceil(y)-1;
        collision_occured = true;
    }
    while (position_meeting(x, y-16, obj_ghostfloor))
    {
        y = floor(y)+1;
        collision_occured = true;
    }
    while (position_meeting(x+16, y, obj_ghostfloor))
    {
        x = floor(x)-1;
    }
    if (collision_occured){
        mid_fall = 1;
        mid_jump = 0;
        jump_type = 0;
        break;
    }
}


if (position_meeting(x, y+17, obj_ghostfloor)){
    mid_fall = 0;
    mid_air_start_x = x;
    mid_air_start_y = y;
    jump_type = 0;
}
else{
    mid_fall = 1;
}



if (position_meeting(x, y-17, obj_ghostfloor)){
    mid_jump = 0;
    if (y&lt;last_known_y)
    {
        mid_air_start_x = x;
        mid_air_start_y = y;
        jump_type = 0;
    }
}


last_known_y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>last_known_x = 0;
short_jump_key = keyboard_check(ord('Z'));  //czy wcisniety z
long_jump_key = keyboard_check(ord('X'));  //czy wcisniety x
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*************************************************************************************************
    Oczyt pozycji glowicy na tasmie nie jest dokladny. Sprawdzajac pozycje co obieg petli
    otrzymujemy wynik podobny do tego: 0,0,0,3,3,7,7,7,12,12,12,12,12,20,20,20,20...
    Jako, ze pozycja bohatera uwarunkowana jest od tego odczytu, posilkujemy sie odczytem
    zegara. Jezeli dwa ostatnie odczyty glowicy sa identyczne, przesuwamy bohatera
    o odleglosc wynikajaca z dlugosci klatki.
*************************************************************************************************/


if ( global.current_music_controller.head_position != global.current_music_controller.last_known_head_position){
    //pozycja pilki = wielkosc kafla * BPS * szybkosc pilki * (pozycja glowicy + przesuniecie glowicy);
    var expected_x = start_position_x + 32 * global.current_music_controller.tempo/60 * h_speed * (global.current_music_controller.head_position + global.current_music_controller.shift);
    
    if ( x &gt; expected_x ){
        x = expected_x;
    }   
}
else{
    x += 32 * global.current_music_controller.tempo/60 * h_speed * (global.current_time_controller.frame_time/1000);
}



if (short_jump_key &amp;&amp; !mid_jump &amp;&amp; !mid_fall){
    //mid_air_start_x = x;
    //mid_air_start_y = y;
    mid_jump = 1;
    jump_type = 1;
    //ydir = -1;
}

if (long_jump_key &amp;&amp; !mid_jump &amp;&amp; !mid_fall){
    //mid_air_start_x = x;
    //mid_air_start_y = y;
    mid_jump = 1;
    jump_type = 2;
}

if (mid_jump || mid_fall){
   y = mid_air_start_y + (4*(jump_height/(jump_length*jump_length))*(x-mid_air_start_x)*(x-mid_air_start_x) - 4*jump_type*(x-mid_air_start_x)*(jump_height/jump_length) );
}


if (x &gt; 20)
{
    var lol = instance_place(50, 50, obj_bazzinga);
    lol.image_alpha =  (128 - (x mod 128))/128;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview[0] = x-200;
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
