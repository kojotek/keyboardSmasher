<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>h_speed = 4;
last_known_y = y;
mid_air_start_x = x;
mid_air_start_y = y;
jump_height = 96;
jump_length = 32*h_speed;
mid_air_type = 0;

start_position_x = x;

mid_air = 0;

speed_factor = 1;
blink = 0;
y_direction = 1;
next_y = y;

uc = 0;
dc = 0;
luc = 0;
ldc = 0;

collision_occured = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/************************************************************
    BULLET COLLISION
************************************************************/

y_direction = sign(next_y-y);
collision_occured = false;

last_known_y = y;

if (y_direction != 0) {
    do{
        if (place_meeting(x,y,obj_ghostfloor)){
            collision_occured = true;
            event_perform(ev_other, macro_go_from_object);      //wycofywanie sie z kolizji
            break;
        }
        else{
            y += 31 * y_direction;
        }
    }
    until (! ((y&lt;next_y)*(1+y_direction)+(y&gt;next_y)*(1-y_direction)) )
    
    if (!collision_occured)
    {
        y = next_y;
        event_perform(ev_other, macro_go_from_object);      //wycofywanie sie z kolizji
    }
}




if (position_meeting(x, y+17, obj_ghostfloor)){
    mid_air_start_x = x;
    mid_air_start_y = y;
    mid_air_type = macro_fall;
    mid_air = 0;
    jump_height = 300;
}
else{
    mid_air = 1;
}


if (position_meeting(x, y-17, obj_ghostfloor)){
    if (y&lt;last_known_y)
    {
        mid_air_start_x = x;
        mid_air_start_y = y;
        mid_air_type = macro_fall;
        jump_height = 300;
    }
}

        show_debug_message(mid_air_start_x);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>last_known_x = 0;
short_jump_key = keyboard_check(ord('Z'));  //czy wcisniety z
long_jump_key = keyboard_check(ord('X'));  //czy wcisniety x
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*************************************************************************************************
    Oczyt pozycji glowicy na tasmie nie jest dokladny. Sprawdzajac pozycje co obieg petli
    otrzymujemy wynik podobny do tego: 0,0,0,3,3,7,7,7,12,12,12,12,12,20,20,20,20...
    Jako, ze pozycja bohatera uwarunkowana jest od tego odczytu, posilkujemy sie odczytem
    zegara. Jezeli dwa ostatnie odczyty glowicy sa identyczne, przesuwamy bohatera
    o odleglosc wynikajaca z dlugosci klatki.
*************************************************************************************************/

if (global.current_music_controller.head_position != global.current_music_controller.last_known_head_position){
    //pozycja pilki = wielkosc kafla * BPS * szybkosc pilki * (pozycja glowicy + przesuniecie glowicy);
    var expected_x = start_position_x + 32 * global.current_music_controller.tempo/60 * h_speed * (global.current_music_controller.head_position + global.current_music_controller.shift);
    speed_factor = 1 - (x - expected_x)/20;
}
else{
    x += 32 * global.current_music_controller.tempo/60 * h_speed * (global.current_time_controller.frame_time/1000) * speed_factor;
}


if (short_jump_key &amp;&amp; !mid_air){
    mid_air = 1;
    mid_air_type = macro_jump;
    jump_height = 96;
    jump_length = 32*h_speed;
}

if (long_jump_key &amp;&amp; !mid_air){
    mid_air = 1;
    mid_air_type = macro_jump;
    jump_height = 96*2;
    jump_length = 64*h_speed;
}

if (mid_air){
   next_y = mid_air_start_y + (4*(jump_height/(jump_length*jump_length))*(x-mid_air_start_x)*(x-mid_air_start_x) - 4*mid_air_type*(x-mid_air_start_x)*(jump_height/jump_length) );
}

blink = (128 - (x mod 128))/256;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while (position_meeting(x, y+16, obj_ghostfloor))
{
    y = ceil(y)-1;
}
while (position_meeting(x, y-16, obj_ghostfloor))
{
    y = floor(y)+1;
}
while (position_meeting(x+16, y, obj_ghostfloor))
{
    x = floor(x)-1;
}
/*
while (position_meeting(x-16, y, obj_ghostfloor))
{
    x = ceil(x)+1;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview[0] = x-200;
draw_self();

draw_set_alpha(blink);
draw_rectangle_colour(0,0,100000,1000,c_white,c_white,c_white,c_white, 0);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
