<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_runner</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start_position_beat = 0;

horizontal_speed = 0;
horizontal_max_speed = 0;
next_y = y;
next_x = x;
vertical_direction = DOWNWARDS;
horizontal_direction = 1;

enviroment_vertical_speed = 0;
enviroment_horizontal_speed = 0;

platform_vertical_speed = 0;

movement_type = FALL;
jump_start_y = y;
jump_start_beat = 0;
short_jump_height = 224;
short_jump_length = 2;
actual_jump_length = 0;
actual_jump_height = 0;

fall_start_y = y;
fall_start_beat = 0;
fall_height = 320;
fall_length = 2;

dash_start_x = -1000;
dash_start_beat = -200;
dash_length = 1;
dash_actual_length = 0;
dash_available = false;

slide_start_beat = 0;
slide_length = 1;
slide_actual_length = 0;
slide_available = true;

on_ground = false;
touch_ceiling = false;

jump_input_edge = 0;
dash_input_edge = 0;
slide_input_edge = 0;
slide_input_constant = 0;
left_input_constant = 0;
right_input_constant = 0;

sprite_index = spr_runner;
mask_index = spr_mask_big;
mask_w = MASK_WIDTH;
mask_h = MASK_BIG_HEIGHT;

animation_start_x = 0;
animation_start_beat = 0;
sprite_rotation = 0;

//colliding_object = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/************************************************************
    KOLIZJE
************************************************************/


vertical_direction = sign(next_y-y);

if (movement_type != DASH){
    next_y += enviroment_vertical_speed;
    y += enviroment_vertical_speed;
    //next_x += enviroment_horizontal_speed;
    //x += enviroment_horizontal_speed;
}

var shift_x = 0;    //Je≈ºeli przesuniecie wywolane kolizja jest zbyt duze, uznajemy, ze doszlo do zmiazdzenia posaci
var shift_y = 0;


/************************************************************
    KOLIZJE PIONOWE
************************************************************/

if  (movement_type == DASH){
    var counter = 1;
    var sig = -1;
    while(place_meeting(x,next_y,obj_collidable)){
        next_y += sig * counter;
        sig = -sig;
        counter += 0.5;
        shift_y = counter;
    }
}
else{
    while ( place_meeting(x,next_y, obj_collidable)){
        next_y -= (vertical_direction+0.5);
        shift_y -= (vertical_direction+0.5);
    }
}

if (abs(shift_y) &gt; mask_h*1.3){
    event_perform(ev_other, EVENT_DIE);
}

y = next_y;

/************************************************************
    KOLIZJE POZIOME
************************************************************/

while ( place_meeting(next_x,y, obj_collidable)){
       next_x -= sign(next_x-x)/2;
       horizontal_speed = 0;
       shift_x += 1/2;
   }
   
if (shift_x &gt; mask_w){
    event_perform(ev_other, EVENT_DIE);
}
   
x = next_x;

/************************************************************
    Kontakt z gruntem
************************************************************/

on_ground = (position_meeting(x-15, y+mask_h/2+1, obj_collidable)
            || position_meeting(x-8, y+mask_h/2+1, obj_collidable)
            || position_meeting(x+8, y+mask_h/2+1, obj_collidable)
            || position_meeting(x+15, y+mask_h/2+1, obj_collidable));

touch_ceiling = 1 &lt;= (position_meeting(x-15, y-mask_h/2-1, obj_collidable)
            + position_meeting(x-8, y-mask_h/2-1, obj_collidable)
            + position_meeting(x+8, y-mask_h/2-1, obj_collidable)
            + position_meeting(x+15, y-mask_h/2-1, obj_collidable));

                
image_index = (floor(global.room_controller.beats*image_number-animation_start_beat)) mod image_number;

if (sprite_index == spr_ball){
    sprite_rotation = -2*x;
}
else{
    sprite_rotation = 0;
}

image_xscale = sign(horizontal_speed)*(horizontal_speed != 0) 
            + sign(horizontal_direction)*(horizontal_speed == 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enviroment_vertical_speed = 0;
enviroment_horizontal_speed = 0;
enviroment_speed_factor = 1;
platform_vertical_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*************************************************************************************************
    obsluga ruchu
*************************************************************************************************/

if (movement_type != DASH){
    if (right_input_constant != left_input_constant){
        horizontal_direction = (right_input_constant - left_input_constant);
        horizontal_max_speed = ((global.room_controller.music_controller.tempo/60)/room_speed) * 8 * 32 * 1.2;
        var max_speed = horizontal_max_speed*enviroment_speed_factor;
        horizontal_speed = clamp(-max_speed,horizontal_speed+horizontal_direction/2,max_speed);
    }
    else{
        if (abs(horizontal_speed) &lt; 1)
            horizontal_speed = 0;
        else
            horizontal_speed -= sign(horizontal_speed)/2;
    }
}


/*************************************************************************************************
    obsluga skokow
*************************************************************************************************/


if (jump_input_edge &gt; 0 
    &amp;&amp; on_ground &amp;&amp; !touch_ceiling 
    &amp;&amp; (movement_type == RUN || movement_type == SLIDE) ){
        hero_start_jump(id, short_jump_length, short_jump_height - platform_vertical_speed/4 );
        show_debug_message(enviroment_vertical_speed*60);
}


/*************************************************************************************************
    obsluga szybowania
*************************************************************************************************/

if (dash_input_edge &gt; 0 &amp;&amp; dash_available){
    hero_start_dash(id, dash_length);
}


/*************************************************************************************************
    obsluga slizgu
*************************************************************************************************/

if (slide_input_edge &gt; 0 &amp;&amp; movement_type == RUN){
    hero_start_slide(id, slide_length);
}


switch (movement_type)
{
    case RUN:
        event_perform(ev_other, EVENT_RUN);
        break;

    case JUMP:
        event_perform(ev_other, EVENT_JUMP);
        break;
        
    case DASH:
        event_perform(ev_other, EVENT_DASH);
        break;

    case SLIDE:
        event_perform(ev_other, EVENT_SLIDE);
        break;
        
    case FALL:
        event_perform(ev_other, EVENT_FALL);
        break;
}


if (dash_start_beat + dash_length + 0.45 &lt;= global.room_controller.beats ){
    dash_available = true;
}

next_x = x+horizontal_speed;

jump_input_edge -= (global.current_time_controller.frame_time/1000);
dash_input_edge -= (global.current_time_controller.frame_time/1000);
slide_input_edge -= (global.current_time_controller.frame_time/1000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>die</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var inst = global.room_controller.camera_controller;
if (inst != noone){
    inst.shake_x = 15;
    inst.shake_y = 15;
    effect_create_above(ef_firework,x,y, 1, c_yellow);
    effect_create_above(ef_firework,x+16,y, 1, c_yellow);
    effect_create_above(ef_firework,x-16,y, 1, c_yellow);
    effect_create_above(ef_firework,x,y-16, 1, c_yellow);
    effect_create_above(ef_firework,x,y+16, 1, c_yellow);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>run</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (on_ground){
    next_y = y;    
}
else{
    movement_type = FALL;
    fall_start_y = y;
    fall_start_beat = global.room_controller.beats;
}

if (abs(horizontal_speed) &lt; 3){
    sprite_index = spr_stand;
}
else{
    if (sign(horizontal_speed) == ((-1)*right_input_constant + left_input_constant)
    || horizontal_speed != 0 &amp;&amp; right_input_constant == left_input_constant){
        sprite_index = spr_brake;
    }
    else{
        sprite_index = spr_runner;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>slide</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!on_ground){
    hero_start_fall(id);
    slide_available = true;
}

if (global.room_controller.beats &lt; slide_start_beat + slide_actual_length ){
    next_y = y;
}
else{
    if (touch_ceiling || slide_input_constant){
        slide_actual_length += 0.2;
    }
    else{
        y -= MASK_SMALL_HEIGHT/2;
        next_y -= MASK_SMALL_HEIGHT/2;
        hero_start_run(id);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fall</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>next_y = fall_start_y + 4*(fall_height/(fall_length*fall_length))*(global.room_controller.beats - fall_start_beat)*(global.room_controller.beats - fall_start_beat);

if( place_meeting(x,y+1, obj_collidable) ){
    var inst = instance_place(x,y+1, obj_collidable)
    y = inst.y - inst.sprite_height/2;
    next_y = y;
    on_ground = true;
}

if (on_ground){
    movement_type = RUN;
    sprite_index = spr_runner;
    mask_index = spr_mask_big;
    mask_h = MASK_BIG_HEIGHT;
    animation_start_beat = global.room_controller.beats;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dash</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.room_controller.beats &lt; dash_start_beat + dash_actual_length ){
    next_y = y;
    horizontal_max_speed = ((global.room_controller.music_controller.tempo/60)/room_speed) * 8 * 32 * 1.5;
    horizontal_speed = horizontal_max_speed*horizontal_direction;
    var inst = instance_find(obj_camera_controller,0);
}
else{
    if (touch_ceiling){
        show_debug_message("touches!")
        if (on_ground){
            show_debug_message( dash_actual_length)
            dash_actual_length += 0.2;
        }
        else{
            y += MASK_SMALL_HEIGHT/2;
            next_y = y;
        }
    }
    else{
        hero_start_fall(id);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>next_y = jump_start_y 
        + (4*(actual_jump_height/(actual_jump_length*actual_jump_length))
            *power((global.room_controller.beats - jump_start_beat), 2)
        - 4*(global.room_controller.beats - jump_start_beat)
            *(actual_jump_height/actual_jump_length) );

if (on_ground &amp;&amp; vertical_direction == DOWNWARDS){
    hero_start_run(id);
}

if (touch_ceiling){
    hero_start_fall(id);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,sprite_rotation,image_blend,image_alpha);

if (global.room_controller.beats - dash_start_beat &lt; sprite_get_number(spr_smoke)/10){
    draw_sprite_ext(spr_smoke, (global.room_controller.beats-dash_start_beat)*10, dash_start_x,y,1,1,0,image_blend,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
